import chai from 'chai';
import chaiAsPromised from 'chai-as-promised';
import { initTestEngine } from '../../../tests/setup.test';
import { POIValidation } from '../poi-validation';
import {
  Chain,
  NETWORK_CONFIG,
  NetworkName,
  TXIDVersion,
  isDefined,
} from '@railgun-community/shared-models';
import {
  POI,
  PreTransactionPOIsPerTxidLeafPerList,
  RailgunWallet,
} from '@railgun-community/engine';
import {
  createRailgunWallet,
  fullWalletForID,
  loadProvider,
} from '../../railgun';
import {
  MOCK_DB_ENCRYPTION_KEY,
  MOCK_FALLBACK_PROVIDER_JSON_CONFIG_GOERLI,
} from '../../../tests/mocks.test';
import Sinon, { SinonStub } from 'sinon';

chai.use(chaiAsPromised);
const { expect } = chai;

const txidVersion = TXIDVersion.V2_PoseidonMerkle;
const networkName = NetworkName.EthereumGoerli;
const chain: Chain = NETWORK_CONFIG[networkName].chain;

const MOCK_MNEMONIC_1 =
  'test test test test test test test test test test test junk';

let getActiveListsStub: SinonStub;
let railgunWallet: RailgunWallet;

describe('poi-validation', () => {
  before(async function run() {
    this.timeout(15000);

    getActiveListsStub = Sinon.stub(POI, 'getActiveListKeys').returns([
      'test_list',
    ]);

    initTestEngine();

    await loadProvider(
      MOCK_FALLBACK_PROVIDER_JSON_CONFIG_GOERLI,
      networkName,
      10000, // pollingInterval
    );

    const railgunWalletInfo = await createRailgunWallet(
      MOCK_DB_ENCRYPTION_KEY,
      MOCK_MNEMONIC_1,
      undefined,
      1, // derivation index for receiving wallet
    );
    if (!isDefined(railgunWalletInfo)) {
      throw new Error('No railgun wallet created');
    }
    railgunWallet = fullWalletForID(railgunWalletInfo.id);

    // Set a mock validator for poi merkleroots.
    POIValidation.init(async () => true);
  });

  after(() => {
    getActiveListsStub.restore();
  });

  // How to update mock data in this test:
  //
  // Send an actual transaction on Goerli, it will fail, but grab the parameters
  // that you sent into the relayer, it will contain the pre-transaction proof.
  it('Should validate pre-transaction POI', async () => {
    const contractTransaction = {
      to: '0xe8bEa99BB438C2f3D533604D33258d74d5eE4824',
      data: '0xd8ae136a000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020232dab5b7ecaa2cd390f8f056a0619c4c338856e90a16801ab3478cb545b57e61f28a82bb780ba52973d98e8bfa0162ed21978bda341ed0981489482fa01c77d16892a7d43ab52122bdcf05074077cbd91ca47a0515e46ce8a23f6edf80b0cee0a1c7a4ad7afec983364d29f8788b22bee832555b875ecf18638653c4369e7fa0611df5df0a91e90012cf93cebc328a6615b0aee6c67c65ebe2d620a2a3c378318c4e4b75ac2540049eefd61d833b9dd0307fa4aaec827771c85ac3c7135a396289f854da4bfde348531ba44c263318a276b4641cd61938a429d4fd417906c710dba738e05678897c0bd08cdbfaf0c9ae1d3d15f6569fd4fe4f31ebb286a628c233cbba7a2f85b8f16396a69f95536332185b2cf0dad93319c025df5d2773dc40000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000026000000000000000000000000000000000000000000000000000000000000002e0000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb9226600000000000000000000000000000000000000000000000000000000000000000000000000000000000000009fe46736679d2d9a65f0992f2272de9f3c7fa6e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001043561a8829300000000000000000000000000000000000000000000000000000000000000000000105802951a46d9e999151eb0eb9e4c7c1260b7ee88539011c207dc169c4dd17ee00000000000000000000000000000000000000000000000000000000000000032c5acad8f41f95a2795997353f6cdb0838493cd5604f8ddc1859a468233e15ac0c3f2e70ce66ea83593e26e7d13bd27a2a770920964786eaed95551b4ad51c4e05b93bb7d3cd650232f233868e9a420f08031029720f69df51dd04c6b7e5bd700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000007a690000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001c0abcdef1234567890abcdef12345678906ef0c3ccf9f6a1f57bc75ed315cb2c2e974fdceb364979001130386f15d5a9fd5bf604085b50a6789ed2823409c1244ffd614c564ef11897939efd4eabccb32287c305da3390cbf05c66ae0d4d9cef10a1a41e92db2dee7b4dab052d5c03dccac780cdf00d37202b1ee53706502e314e807bffcd9525cef062cf6a96f544f71eda6f6407a60ff2ee5e66abfececcc849523eb8739084fa32e1219269617a3fd1dcd1830e75231ace190d457399a98faf00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000003eabcdef1234567890abcdef12345678905e37f054ac7f9b130bd8b81d3f07a6d5a84b23bafdf708b85030621980ef2415c1c23f0aed8b6555703f50a553eb00000000000000000000000000000000000000000000000000000000000000000000abcdef1234567890abcdef1234567890e395b0874113ab1f01608b4c696ebaacc2ee49248fdede26b3a1cd7449546b9801dbd8338eea34c20d73ce23a4f2e951e212d0ad7014eae3de2fe1416a2e6292480b8f26f1d44556068dff5928a9bf12379e865e3f9bc7d82d50914498a5cac86fb6d4baa83f56a32e8be44068d29a5c6d30dd91789253059973d76514a96afae3719f7a17f4c58813193035f1d304ee6d30dd91789253059973d76514a96afae3719f7a17f4c58813193035f1d304ee00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000003eabcdef1234567890abcdef12345678905d3e7731ef5e92946e9b9914b862e5f4a84b23bafdf708b85030621980ef2415c1c23f0aed8b6555703f50a553eb00000000000000000000000000000000000000000000000000000000000000000000',
    };

    const pois: PreTransactionPOIsPerTxidLeafPerList = {
      test_list: {
        '136f24c883d58d7130d8e001a043bad3b2b09a36104bec5b6a0f8181b7d0fa70': {
          snarkProof: {
            pi_a: [
              '5380762281835890066100090423863705522896972209892318692303327183855508202767',
              '11036679349320452419967824441721309024857468320780759951614866246507617986379',
            ],
            pi_b: [
              [
                '5115840209701577903925325063762772924357454881596996800947316604059087792757',
                '16512788805950483671906566767892308778067849690985609542392540226010090835490',
              ],
              [
                '14211819371472883670521096940957426318269436505511811018946379122303800209684',
                '3010912222885073021392049091933573960610932519969201999874020107525206868234',
              ],
            ],
            pi_c: [
              '12876359361927135091199956730466477505146955933153249817303688966791342815821',
              '1711500457819302634083345214883352639387259771625484512325980604438024281129',
            ],
          },
          txidMerkleroot:
            '171280a4deabf34cc6d73713225ece6565516313f4475a07177d0736e2b4eaa4',
          poiMerkleroots: [
            '284d03b4f4e545a9bf5259162f0d5103c1598c98217b84ec51589610d94f7071',
          ],
          blindedCommitmentsOut: [
            '0x1441c994c1336075c8fc3687235e583fb5fa37e561184585bac31e3c029a46eb',
            '0x19f596cb35c783ce81498026696fae8f84de0937f68354ef29a08bf8c01e3f38',
          ],
          railgunTxidIfHasUnshield:
            '0x0fefd169291c1deec2affa8dcbfbee4a4bbeddfc3b5723c031665ba631725c62',
        },
      },
    };

    const validSpendable = await POIValidation.isValidSpendableTransaction(
      railgunWallet.id,
      txidVersion,
      chain,
      contractTransaction,
      false, // useRelayAdapt
      pois,
    );
    expect(validSpendable).to.deep.equal({
      isValid: true,
      extractedRailgunTransactionData: [
        {
          railgunTxid:
            '0fefd169291c1deec2affa8dcbfbee4a4bbeddfc3b5723c031665ba631725c62',
          utxoTreeIn: 0n,
          firstCommitment:
            '0x2c5acad8f41f95a2795997353f6cdb0838493cd5604f8ddc1859a468233e15ac',
          firstCommitmentNotePublicKey:
            2800314339815912641032015410982157821342520564864853273055282304996901162130n, // undefined?
        },
      ],
    });

    // Invalid value
    pois.test_list[
      '136f24c883d58d7130d8e001a043bad3b2b09a36104bec5b6a0f8181b7d0fa70'
    ].snarkProof.pi_a[0] =
      '13766471856281251472923302905099603168301598594631438526482227084351434874783';

    const invalidSpendable = await POIValidation.isValidSpendableTransaction(
      railgunWallet.id,
      txidVersion,
      chain,
      contractTransaction,
      false, // useRelayAdapt
      pois,
    );
    expect(invalidSpendable).to.deep.equal({
      isValid: false,
      error:
        'Could not validate spendable TXID: Could not verify POI snark proof: list test_list',
    });
  }).timeout(20000);
});
