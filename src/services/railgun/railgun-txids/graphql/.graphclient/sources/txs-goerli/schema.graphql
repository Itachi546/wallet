schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

"""
8 bytes signed integer

"""
scalar Int8

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Query {
  transaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Transaction
  transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: Transaction_orderBy
    orderDirection: OrderDirection
    where: Transaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Transaction!]!
  transactionInterface(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TransactionInterface
  transactionInterfaces(
    skip: Int = 0
    first: Int = 100
    orderBy: TransactionInterface_orderBy
    orderDirection: OrderDirection
    where: TransactionInterface_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TransactionInterface!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Subscription {
  transaction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Transaction
  transactions(
    skip: Int = 0
    first: Int = 100
    orderBy: Transaction_orderBy
    orderDirection: OrderDirection
    where: Transaction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Transaction!]!
  transactionInterface(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TransactionInterface
  transactionInterfaces(
    skip: Int = 0
    first: Int = 100
    orderBy: TransactionInterface_orderBy
    orderDirection: OrderDirection
    where: TransactionInterface_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TransactionInterface!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Transaction implements TransactionInterface {
  id: Bytes!
  blockNumber: BigInt!
  transactionHash: Bytes!
  merkleRoot: Bytes!
  nullifiers: [Bytes!]!
  commitments: [Bytes!]!
  boundParamsHash: Bytes!
}

interface TransactionInterface {
  id: Bytes!
  blockNumber: BigInt!
  transactionHash: Bytes!
  merkleRoot: Bytes!
  nullifiers: [Bytes!]!
  commitments: [Bytes!]!
  boundParamsHash: Bytes!
}

input TransactionInterface_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  merkleRoot: Bytes
  merkleRoot_not: Bytes
  merkleRoot_gt: Bytes
  merkleRoot_lt: Bytes
  merkleRoot_gte: Bytes
  merkleRoot_lte: Bytes
  merkleRoot_in: [Bytes!]
  merkleRoot_not_in: [Bytes!]
  merkleRoot_contains: Bytes
  merkleRoot_not_contains: Bytes
  nullifiers: [Bytes!]
  nullifiers_not: [Bytes!]
  nullifiers_contains: [Bytes!]
  nullifiers_contains_nocase: [Bytes!]
  nullifiers_not_contains: [Bytes!]
  nullifiers_not_contains_nocase: [Bytes!]
  commitments: [Bytes!]
  commitments_not: [Bytes!]
  commitments_contains: [Bytes!]
  commitments_contains_nocase: [Bytes!]
  commitments_not_contains: [Bytes!]
  commitments_not_contains_nocase: [Bytes!]
  boundParamsHash: Bytes
  boundParamsHash_not: Bytes
  boundParamsHash_gt: Bytes
  boundParamsHash_lt: Bytes
  boundParamsHash_gte: Bytes
  boundParamsHash_lte: Bytes
  boundParamsHash_in: [Bytes!]
  boundParamsHash_not_in: [Bytes!]
  boundParamsHash_contains: Bytes
  boundParamsHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TransactionInterface_filter]
  or: [TransactionInterface_filter]
}

enum TransactionInterface_orderBy {
  id
  blockNumber
  transactionHash
  merkleRoot
  nullifiers
  commitments
  boundParamsHash
}

input Transaction_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  merkleRoot: Bytes
  merkleRoot_not: Bytes
  merkleRoot_gt: Bytes
  merkleRoot_lt: Bytes
  merkleRoot_gte: Bytes
  merkleRoot_lte: Bytes
  merkleRoot_in: [Bytes!]
  merkleRoot_not_in: [Bytes!]
  merkleRoot_contains: Bytes
  merkleRoot_not_contains: Bytes
  nullifiers: [Bytes!]
  nullifiers_not: [Bytes!]
  nullifiers_contains: [Bytes!]
  nullifiers_contains_nocase: [Bytes!]
  nullifiers_not_contains: [Bytes!]
  nullifiers_not_contains_nocase: [Bytes!]
  commitments: [Bytes!]
  commitments_not: [Bytes!]
  commitments_contains: [Bytes!]
  commitments_contains_nocase: [Bytes!]
  commitments_not_contains: [Bytes!]
  commitments_not_contains_nocase: [Bytes!]
  boundParamsHash: Bytes
  boundParamsHash_not: Bytes
  boundParamsHash_gt: Bytes
  boundParamsHash_lt: Bytes
  boundParamsHash_gte: Bytes
  boundParamsHash_lte: Bytes
  boundParamsHash_in: [Bytes!]
  boundParamsHash_not_in: [Bytes!]
  boundParamsHash_contains: Bytes
  boundParamsHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Transaction_filter]
  or: [Transaction_filter]
}

enum Transaction_orderBy {
  id
  blockNumber
  transactionHash
  merkleRoot
  nullifiers
  commitments
  boundParamsHash
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}